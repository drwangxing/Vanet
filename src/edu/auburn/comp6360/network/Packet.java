package edu.auburn.comp6360.network;

//import java.io.ByteArrayInputStream;
//import java.io.ByteArrayOutputStream;
//import java.io.IOException;
//import java.io.ObjectInputStream;
//import java.io.ObjectOutputStream;
import java.io.Serializable;

public class Packet implements Serializable {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = -5088013409407823196L; 	// Automatically generated by Eclipse
	private Header header;
	private VehicleInfo vInfo;
	
//	private int packetSize;
	
	public Packet(Header header) {
		this.header = header;
		this.vInfo = null;
	}

	public Packet(Header header, VehicleInfo vInfo) {
		this.header = header;
		this.vInfo = vInfo;
	}
	
	public void setHeader(Header header) {
		this.header = header;
	}
	
	public void setVehicleInfo(VehicleInfo vInfo) {
		this.vInfo = vInfo;
	}

	public void setPrevHop(int nid) {
		this.header.setPrevHop(nid);
	}
	
	public int getPrevHop() {
		return this.header.getPrevHop();
	}
	
	public Header getHeader() {
		return this.header;
	}
	
	public VehicleInfo getVehicleInfo() {
		return this.vInfo;
	}
	
	public int getPacketSize() {
		return 4096;
	}
	
	public int increasePathLength() {
		return this.header.increasePathLength();
	}
	
//	public Packet forwardCopy(int newPrevHop) {
//		// Serialization of object
//		ByteArrayOutputStream bos = new ByteArrayOutputStream();
//		ObjectOutputStream oos = null;
//		ObjectInputStream ois = null;
//		Packet copied = null;
//		try {
//			oos = new ObjectOutputStream(bos);
//			oos.writeObject(this);
//			//Deserialization of object
//			byte[] packetBytes = bos.toByteArray();
//			ByteArrayInputStream bis = new ByteArrayInputStream(packetBytes);
//			ois = new ObjectInputStream(bis);
//			copied = (Packet) ois.readObject();
//			copied.setPrevHop(newPrevHop);
//		} catch (IOException | ClassNotFoundException e) {
//			e.printStackTrace();
//		}
//		return copied;
//	}
	
	public String toString() {
		StringBuffer sb = new StringBuffer();
//		sb.append("source: " + this.getHeader().getSource() + ", ");
		Header header = this.getHeader();
		sb.append(header.getPacketType() + " " + header.getSeqNum());
		sb.append(", source: " + header.getSource());
		sb.append(", prev hop: " + header.getPrevHop() + ".\t");
		if (!(header.getPacketType().equals("normal")))
			sb.append("Piggybacked info: " + header.getPiggyback() + ".\t");
		if (this.getVehicleInfo() != null)
			sb.append(this.getVehicleInfo().toString());
		return sb.toString(); 
	}
	
}
